import {
  type SwapActionParams,
  GreaterThanOrEqual,
} from '@rabbitholegg/questdk'
import {
  parseEther,
  parseUnits,
  zeroAddress,
  getAddress,
  type Address,
} from 'viem'
import { createTestCase, type TestParams } from './utils'
import { ARBITRUM_ONE } from './constants'

// Paraswap Test Txs
const PARASWAP_SIMPLESWAP: TestParams<SwapActionParams> = {
  transaction: {
    chainId: 42161,
    from: '0x865c301c46d64de5c9b124ec1a97ef1efc1bcbd1',
    to: '0xdef171fe48cf0115b1d80b88dc8eab59176fee57',
    hash: '0xfe3d97d0132b73fa9cfcb4ea4fe7eafdc70bae19a1912b14a46356420866f7e9',
    input:
      '0x54e3f31b0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000912ce59144191c1204e64559fe8253a0e49e6548000000000000000000000000af88d065e77c8cc2239327c5edb3a432268e58310000000000000000000000000000000000000000000000000e3ea36e8f91d5530000000000000000000000000000000000000000000000000000000000110a310000000000000000000000000000000000000000000000000000000000112d4f00000000000000000000000000000000000000000000000000000000000001e0000000000000000000000000000000000000000000000000000000000000024000000000000000000000000000000000000000000000000000000000000003800000000000000000000000000000000000000000000000000000000000000400000000000000000000000000865c301c46d64de5c9b124ec1a97ef1efc1bcbd1000000000000000000000000fa2c1be677be4bec8851d1577b343f7060b51e3a010000000000000000000000000000000000000000000000000000000000401e00000000000000000000000000000000000000000000000000000000000004600000000000000000000000000000000000000000000000000000000065842857e5365097d06f420e915f1f8fb8777c3e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000912ce59144191c1204e64559fe8253a0e49e6548000000000000000000000000eff23b4be1091b53205e35f3afcd9c7182bf30620000000000000000000000000000000000000000000000000000000000000108a9059cbb000000000000000000000000eff23b4be1091b53205e35f3afcd9c7182bf30620000000000000000000000000000000000000000000000000e3ea36e8f91d5537dc20382000000000000000000000000912ce59144191c1204e64559fe8253a0e49e6548000000000000000000000000af88d065e77c8cc2239327c5edb3a432268e58310000000000000000000000000000000000000000000000000e3ea36e8f91d5530000000000000000000000000000000000000000000000000000000000000001000000000000000000000000def171fe48cf0115b1d80b88dc8eab59176fee57000000000000000000000000d5b927956057075377263aab7f8afc12f85100db
    value: '0',
  },
  params: {
    chainId: ARBITRUM_ONE,
    tokenIn: '0x912CE59144191C1204E64559FE8253a0e49E6548', // ARB
    tokenOut: '0xaf88d065e77c8cC2239327C5EDb3A432268e5831', // USDC
    amountIn: GreaterThanOrEqual(parseUnits('1', 18)),
    amountOut: GreaterThanOrEqual(parseUnits('1.11', 6)),
    recipient: '0x865c301c46d64de5c9b124ec1a97ef1efc1bcbd1',
  },
}

const PARASWAP_MULTISWAP: TestParams<SwapActionParams> = {
  transaction: {
    chainId: 42161,
    from: '0x865c301c46d64de5c9b124ec1a97ef1efc1bcbd1',
    to: '0xdef171fe48cf0115b1d80b88dc8eab59176fee57',
    hash: '0x4345c0080add9f7e06db72efc82b5dafc045618d9b8369be68586401f4fc7911',
    input:
      '0xa94e78ef0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000539bde0d7dbd336b79148aa742883198bbf6034200000000000000000000000000000000000000000000000029a2241af62c0000000000000000000000000000000000000000000000000000239da6ab876c8d5300000000000000000000000000000000000000000000000023e70aa1250b1880000000000000000000000000865c301c46d64de5c9b124ec1a97ef1efc1bcbd10000000000000000000000000000000000000000000000000000000000000160000000000000000000000000fa2c1be677be4bec8851d1577b343f7060b51e3a010000000000000000000000000000000000000000000000000000000000401e0000000000000000000000000000000000000000000000000000000000000740000000000000000000000000000000000000000000000000000000006584240629e09fed404b4c03ad7c8d37697b223800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000320000000000000000000000000ff970a61a04b1ca14834a43f5de4533ebddb5cc80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000369a2fdb910d432f0a07381a5e3d27572c876713000000000000000000000000000000000000000000000000000000000000271000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000003000000000000000000000000e592427a0aece92de3edee1f18e0157c05861564000000000000000000000000000000000000000000000000000000000000271000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000658d0a25000000000000000000000000000000000000000000000000000000000000002b539bde0d7dbd336b79148aa742883198bbf60342002710ff970a61a04b1ca14834a43f5de4533ebddb5cc80000000000000000000000000000000000000000000000000000000000000000008616e8ea83f048ab9a5ec513c9412dd2993bce3f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000369a2fdb910d432f0a07381a5e3d27572c876713000000000000000000000000000000000000000000000000000000000000271000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000006000000000000000000000000d0dd5d76cf0fc06dabc48632735566dca241a35e000000000000000000000000000000000000000000000000000000000000271000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000',
    value: '0',
  },
  params: {
    chainId: ARBITRUM_ONE,
    tokenIn: '0x539bde0d7dbd336b79148aa742883198bbf60342', // MAGIC
    tokenOut: '0x8616e8ea83f048ab9a5ec513c9412dd2993bce3f', // fxUSD
    amountIn: GreaterThanOrEqual(parseUnits('3', 18)),
    amountOut: GreaterThanOrEqual(parseUnits('2.51', 18)),
    recipient: '0x865c301c46d64de5c9b124ec1a97ef1efc1bcbd1',
  },
}

const PARASWAP_UNI_V3: TestParams<SwapActionParams> = {
  transaction: {
    chainId: 42161,
    from: '0x865c301c46d64de5c9b124ec1a97ef1efc1bcbd1',
    to: '0xdef171fe48cf0115b1d80b88dc8eab59176fee57',
    hash: '0xdc4f726560293b41a0ee72048e2d94970a45a046d88447444dab8bc54cb25a94',
    input:
      '0xa6886da90000000000000000000000000000000000000000000000000000000000000020000000000000000000000000539bde0d7dbd336b79148aa742883198bbf60342000000000000000000000000912ce59144191c1204e64559fe8253a0e49e6548000000000000000000000000e592427a0aece92de3edee1f18e0157c058615640000000000000000000000000000000000000000000000000de0b6b3a76400000000000000000000000000000000000000000000000000000a90764f1672a2ca0000000000000000000000000000000000000000000000000aa63b29581ed266010000000000000000000000000000000000000000000000000000000000401e00000000000000000000000000000000000000000000000000000000658404ab000000000000000000000000fa2c1be677be4bec8851d1577b343f7060b51e3a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000865c301c46d64de5c9b124ec1a97ef1efc1bcbd100000000000000000000000000000000000000000000000000000000000001c00000000000000000000000000000000000000000000000000000000000000220e2986323ad904dbf827dc23846a7149700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002b539bde0d7dbd336b79148aa742883198bbf60342002710912ce59144191c1204e64559fe8253a0e49e65480000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',
    value: '0',
  },
  params: {
    chainId: ARBITRUM_ONE,
    tokenIn: '0x539bde0d7dbd336b79148aa742883198bbf60342', // MAGIC
    tokenOut: '0x912ce59144191c1204e64559fe8253a0e49e6548', // ARB
    amountIn: GreaterThanOrEqual(parseUnits('1', 18)),
    amountOut: GreaterThanOrEqual(parseUnits('0.74', 18)),
    recipient: '0x865c301c46d64de5c9b124ec1a97ef1efc1bcbd1',
  },
}

const PARASWAP_FAIL: TestParams<SwapActionParams> = {
  transaction: {
    chainId: 42161,
    from: '0x9a1385dded2c1c00b8ac11e6597e86f3879a3403',
    to: '0xdef171fe48cf0115b1d80b88dc8eab59176fee57',
    hash: '0x87724762847aa87653a3ee3b06ea0ea2ea2c0bf5a08012d9fc005fdc9241b7d1',
    input:
      '0x54e3f31b0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000d77b108d4f6cefaa0cae9506a934e825becca46e000000000000000000000000ff970a61a04b1ca14834a43f5de4533ebddb5cc800000000000000000000000000000000000000000000019e1ae5ee6e872c7e3800000000000000000000000000000000000000000000000000000000387c2a870000000000000000000000000000000000000000000000000000000038c4d48d00000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000038000000000000000000000000000000000000000000000000000000000000003e00000000000000000000000009a1385dded2c1c00b8ac11e6597e86f3879a3403000000000000000000000000353d2d14bb674892910685520ac040f560ccbc0601000000000000000000000000000000000000000000000000000000000313880000000000000000000000000000000000000000000000000000000000000420000000000000000000000000000000000000000000000000000000006583dc2b4c450c4adba14732a0cf0aa7d765f4b90000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000001f721e2e82f6676fce4ea07a5958cf098d339e180000000000000000000000000000000000000000000000000000000000000124c04b8d59000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000def171fe48cf0115b1d80b88dc8eab59176fee5700000000000000000000000000000000000000000000000000000000658d11fb00000000000000000000000000000000000000000000019e1ae5ee6e872c7e3800000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000028d77b108d4f6cefaa0cae9506a934e825becca46eff970a61a04b1ca14834a43f5de4533ebddb5cc800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000124000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',
    value: '0',
  },
  params: {
    chainId: ARBITRUM_ONE,
  },
}

// V2 router
const V2_ROUTER_ETH_TOKENS: TestParams<SwapActionParams> = {
  transaction: {
    chainId: 42161,
    from: '0x865c301c46d64de5c9b124ec1a97ef1efc1bcbd1',
    to: '0x434b5245f6fe54d0c9f881d55c2ba27fe7132d89',
    hash: '0x0e01ef19061c3e16bfa91f48c9120ae408ac8014015f714a80e73b9ae7a61429',
    input:
      '0x481e17e300000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000001ec9ef3426a30660000000000000000000000000865c301c46d64de5c9b124ec1a97ef1efc1bcbd100000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000082af49447d8a07e3bd95bd0d56f35241523fbab10000000000000000000000008616e8ea83f048ab9a5ec513c9412dd2993bce3f0000000000000000000000000000000000000000000000000000000000000380000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001a00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000026000000000000000000000000000000000000000000000000000000000000002c0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000082af49447d8a07e3bd95bd0d56f35241523fbab10000000000000000000000008616e8ea83f048ab9a5ec513c9412dd2993bce3f000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000033fe26fca00000000000000000000000000000000000000000000000000000000005f5e1000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000006584848d000000000000000000000000000000000000000000000000000000006584848d0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000006584846f000000000000000000000000000000000000000000000000000000006584846f0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000027600000000000000000000000000000000000000000000000000000000000002760000000000000000000000000000000000000000000000000000000000000082423b14e6f1a36dc93726f5b2878680533e8f946a794d588287ecb8b923ff8ec35f25548c1c04a9320609350c0f49a3529cf3593d9189e5c3c9817f9b98cc58781c2afb0ef760759ceb8c931dbb1f5530ceea061db5c053da826fd7470386eaf85b35dcbee6a27cca94f9d5891317bd625a92221973fd79f06346b21874d6b3a5391b000000000000000000000000000000000000000000000000000000000000',
    value: '1000000000000000',
  },
  params: {
    chainId: ARBITRUM_ONE,
    tokenIn: zeroAddress, // ETH
    tokenOut: '0x8616e8ea83f048ab9a5ec513c9412dd2993bce3f', // fxUSD
    amountIn: GreaterThanOrEqual(parseEther('0.001')),
    amountOut: GreaterThanOrEqual(parseUnits('2.2185', 18)),
    recipient: '0x865c301c46d64de5c9b124ec1a97ef1efc1bcbd1',
  },
}

const V2_ROUTER_TOKENS_ETH: TestParams<SwapActionParams> = {
  transaction: {
    chainId: 42161,
    from: '0x4806032267387c9e6aab509b497a765d0aca7f61',
    to: '0x434b5245f6fe54d0c9f881d55c2ba27fe7132d89',
    hash: '0x506705b15f164d17d8a14c4a7504643c4d3790ed61d25de39aef759502ebbbe5',
    input:
      '0xcccc6e0500000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000064d7deb5b8f2ecaa000000000000000000000000000000000000000000000000000cb289cf449be90000000000000000000000004806032267387c9e6aab509b497a765d0aca7f6100000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000116172b2482c5dc3e6f445c16ac13367ac3fcd3500000000000000000000000082af49447d8a07e3bd95bd0d56f35241523fbab10000000000000000000000000000000000000000000000000000000000000380000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001a00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000026000000000000000000000000000000000000000000000000000000000000002c00000000000000000000000000000000000000000000000000000000000000002000000000000000000000000116172b2482c5dc3e6f445c16ac13367ac3fcd3500000000000000000000000082af49447d8a07e3bd95bd0d56f35241523fbab1000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000068e296000000000000000000000000000000000000000000000000000000033b29150ff000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000658496f700000000000000000000000000000000000000000000000000000000658496f7000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000658496d900000000000000000000000000000000000000000000000000000000658496d900000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000276000000000000000000000000000000000000000000000000000000000000027600000000000000000000000000000000000000000000000000000000000000827b0b81d2992c30d41e44cb7d3c48cbc682e52f739acc06217340cd7c6dd7435f0298b07426b238ed56bbfe6515b3b4a74e88c49e82411af83c71f8602c8441ad1b7d48ebbc834a4caec4a123f65296ed2899d3714c541ec4b7948692001f31b83804576d033737b13423174d19a75e262095d956ad0c4e32a55f52110481dace381c000000000000000000000000000000000000000000000000000000000000',
    value: '0',
  },
  params: {
    chainId: ARBITRUM_ONE,
    tokenIn: '0x116172b2482c5dc3e6f445c16ac13367ac3fcd35', // fxEUR
    tokenOut: zeroAddress, // ETH
    amountIn: GreaterThanOrEqual(parseUnits('7.26', 18)),
    amountOut: GreaterThanOrEqual(parseEther('0.0035')),
    recipient: '0x4806032267387c9e6aab509b497a765d0aca7f61',
  },
}

// HSPMHLP
const HSPMHLP_TOKENS_ETH: TestParams<SwapActionParams> = {
  transaction: {
    chainId: 42161,
    from: '0xe6dda9a65a56029b4c98be894d8f84099fabfb49',
    to: '0x69328f23a090e57378e3120f622ed0697f0e7ecf',
    hash: '0xd98659cb7bc47888bd269758b05a1a568b530ad13622144d4ca6f66010df1514',
    input:
      '0x5e58a81b000000000000000000000000ff970a61a04b1ca14834a43f5de4533ebddb5cc80000000000000000000000008616e8ea83f048ab9a5ec513c9412dd2993bce3f000000000000000000000000000000000000000000000000000000000003075000000000000000000000000000000000000000000000000000004e14b944ad66000000000000000000000000e6dda9a65a56029b4c98be894d8f84099fabfb4900000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000380000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001a00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000026000000000000000000000000000000000000000000000000000000000000002c000000000000000000000000000000000000000000000000000000000000000020000000000000000000000008616e8ea83f048ab9a5ec513c9412dd2993bce3f00000000000000000000000082af49447d8a07e3bd95bd0d56f35241523fbab100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000005f5e10000000000000000000000000000000000000000000000000000000035775006c000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000065ba37d80000000000000000000000000000000000000000000000000000000065ba37d800000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000065ba37ba0000000000000000000000000000000000000000000000000000000065ba37ba0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000003c000000000000000000000000000000000000000000000000000000000000003c0000000000000000000000000000000000000000000000000000000000000082d6b9bd0166ec6cde93c9b56f7931986d54f8ef0e8f8010d156703eda54d47d3629d641fa779044a9a4c412e48334bd2f8a49dc42c54c74aa7f6fc2bd68c217ad1c90e46ddcb16c04cddd5c321ccaf33b6929aa674d25a2d5986ef46b48c3c2bfc9596bad0791df122b59e89021df032421124df0dfe7a74781435debc5f5fd32631b000000000000000000000000000000000000000000000000000000000000',
    value: '0',
  },
  params: {
    chainId: ARBITRUM_ONE,
    tokenIn: '0xff970a61a04b1ca14834a43f5de4533ebddb5cc8', // USDC.e
    tokenOut: zeroAddress, // ETH
    amountIn: GreaterThanOrEqual(parseUnits('0.19', 6)),
    amountOut: GreaterThanOrEqual(parseEther('0.00008')),
    recipient: '0xe6dda9a65a56029b4c98be894d8f84099fabfb49',
  },
}

const HSPMHLP_TOKENS_TOKENS: TestParams<SwapActionParams> = {
  transaction: {
    chainId: 42161,
    from: '0x29d7e0c5839715a2fe6670a248f471427104b266',
    to: '0x69328f23a090e57378e3120f622ed0697f0e7ecf',
    hash: '0x5f2c3c85b3b865b76100e211663e34b102862181ef68a1bb060b085d482bed62',
    input:
      '0xf12b70d3000000000000000000000000ff970a61a04b1ca14834a43f5de4533ebddb5cc80000000000000000000000008616e8ea83f048ab9a5ec513c9412dd2993bce3f0000000000000000000000007e141940932e3d13bfa54b224cb4a16510519308000000000000000000000000000000000000000000000000000000000025ee8c0000000000000000000000000000000000000000000000003403f12d0f25946f00000000000000000000000029d7e0c5839715a2fe6670a248f471427104b26600000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000380000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001a00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000026000000000000000000000000000000000000000000000000000000000000002c000000000000000000000000000000000000000000000000000000000000000020000000000000000000000008616e8ea83f048ab9a5ec513c9412dd2993bce3f0000000000000000000000007e141940932e3d13bfa54b224cb4a1651051930800000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000005f5e1000000000000000000000000000000000000000000000000000000000003ecd26000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000065a6e2770000000000000000000000000000000000000000000000000000000065a6e27700000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000065a6e2590000000000000000000000000000000000000000000000000000000065a6e2590000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000003c000000000000000000000000000000000000000000000000000000000000003c0000000000000000000000000000000000000000000000000000000000000082296d87bbaa2e052fd54b0e12cf7496e4d7d99e04153a3ffbef4189bb26c7335a29ad65341965f0bbb98510887c5cb745dc3b68a078097b2beb2bdcbad21de83a1c241cbc8cf67cf63e83a47289053ab810c20ce1525588c6a3b12eace54cd27876186658e7548225a14a945e8a9d1ca2d9ea613220e88e14268f7ffc2c9a5b914d1b000000000000000000000000000000000000000000000000000000000000',
    value: '0',
  },
  params: {
    chainId: ARBITRUM_ONE,
    tokenIn: '0xff970a61a04b1ca14834a43f5de4533ebddb5cc8', // USDC.e
    tokenOut: '0x7E141940932E3D13bfa54B224cb4a16510519308', // fxAUD
    amountIn: GreaterThanOrEqual(parseUnits('2.48', 6)),
    amountOut: GreaterThanOrEqual(parseUnits('3.50', 18)),
    recipient: '0x29d7e0c5839715a2fe6670a248f471427104b266',
  },
}

// HPSM2
const HPSM2_WITHDRAW: TestParams<SwapActionParams> = {
  transaction: {
    chainId: 42161,
    from: '0x33e2bd5957c0236e88d750b12bbf32bfb8bb92fb',
    to: '0x0f330a53874cea3e5a0dee5d291c49275fdc3260',
    hash: '0x0a720d80933a2110a07be10186b4ab55db12bdda4a100b282f455bf07eb580a0',
    input:
      '0xd9caed120000000000000000000000008616e8ea83f048ab9a5ec513c9412dd2993bce3f000000000000000000000000ff970a61a04b1ca14834a43f5de4533ebddb5cc80000000000000000000000000000000000000000000000692dcf0f3ed5fc5825',
    value: '0',
  },
  params: {
    chainId: ARBITRUM_ONE,
    tokenIn: '0x8616e8ea83f048ab9a5ec513c9412dd2993bce3f', // fxUSD
    tokenOut: '0xff970a61a04b1ca14834a43f5de4533ebddb5cc8', // USDC.e
    amountIn: GreaterThanOrEqual(parseUnits('1940', 18)),
    recipient: '0x33e2bd5957c0236e88d750b12bbf32bfb8bb92fb',
  },
}

const HPSM2_DEPOSIT: TestParams<SwapActionParams> = {
  transaction: {
    chainId: 42161,
    from: '0x0ffad609d35c4bef104ee245a9c4c891d463aa2a',
    to: '0x0f330a53874cea3e5a0dee5d291c49275fdc3260',
    hash: '0x8b880dd0805ed4767a9a770149bbe9402d44ae334374f2afef8bb5fd257585a8',
    input:
      '0x8340f5490000000000000000000000008616e8ea83f048ab9a5ec513c9412dd2993bce3f000000000000000000000000ff970a61a04b1ca14834a43f5de4533ebddb5cc8000000000000000000000000000000000000000000000000000000003b9aca00',
    value: '0',
  },
  params: {
    chainId: ARBITRUM_ONE,
    tokenIn: '0xff970a61a04b1ca14834a43f5de4533ebddb5cc8', // USDC.e
    tokenOut: '0x8616e8ea83f048ab9a5ec513c9412dd2993bce3f', // fxUSD
    amountIn: GreaterThanOrEqual(parseUnits('1000', 6)),
    recipient: '0x0ffad609d35c4bef104ee245a9c4c891d463aa2a',
  },
}

// HlpCurveV2
const HLP_CURVE_V2_ETH_TO_CURVE: TestParams<SwapActionParams> = {
  transaction: {
    chainId: 42161,
    from: '0x29d7e0c5839715a2fe6670a248f471427104b266',
    to: '0x559844b1df66e247f83ba58bc39fa488a1af1093',
    hash: '0xd3ca60df5b415c5e4382b0fabc05197b1ccf31aa24f778bb81264f0cbfc96790',
    input:
      '0xfb6174e20000000000000000000000008616e8ea83f048ab9a5ec513c9412dd2993bce3f000000000000000000000000ff970a61a04b1ca14834a43f5de4533ebddb5cc800000000000000000000000029d7e0c5839715a2fe6670a248f471427104b26600000000000000000000000000000000000000000000000000000000014b9790000000000000000000000000b17b674d9c5cb2e441f8e196a2f048a81355d031000000000000000000000000ab174ffa530c888649c44c4d21c849bbaabc723f00000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000380000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001a00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000026000000000000000000000000000000000000000000000000000000000000002c0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000082af49447d8a07e3bd95bd0d56f35241523fbab10000000000000000000000008616e8ea83f048ab9a5ec513c9412dd2993bce3f0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000338cb982e00000000000000000000000000000000000000000000000000000000005f5e100000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000656d4bc200000000000000000000000000000000000000000000000000000000656d4bc2000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000656d4ba400000000000000000000000000000000000000000000000000000000656d4ba4000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000002760000000000000000000000000000000000000000000000000000000000000276000000000000000000000000000000000000000000000000000000000000008273932a003b1c7c539140675f2cca9827f1262c2e8b1de35846c643d1d4fd16b61fe38bfa71bf9247236095e397ccc048bbd58742dbbb8938900838c2c8625a511b6593f88a28d529a0c8da7054834fa595c083229e3575d10053c6127e3b29b690483a539636906c62f263a91d3ff9860a314eb478b27c3268933a40aff2680ef81b000000000000000000000000000000000000000000000000000000000000',
    value: '10000000000000000',
  },
  params: {
    chainId: ARBITRUM_ONE,
    tokenIn: zeroAddress, // ETH
    tokenOut: '0xff970a61a04b1ca14834a43f5de4533ebddb5cc8', // USDC.e
    amountIn: GreaterThanOrEqual(parseEther('0.01')),
    amountOut: GreaterThanOrEqual(parseUnits('20', 6)),
    recipient: '0x29d7e0c5839715a2fe6670a248f471427104b266',
  },
}

const HLP_CURVE_V2_PEGGED_TO_CURVE: TestParams<SwapActionParams> = {
  transaction: {
    chainId: 42161,
    from: '0x29d7e0c5839715a2fe6670a248f471427104b266',
    to: '0x559844b1df66e247f83ba58bc39fa488a1af1093',
    hash: '0x3fa25c7d7a069511570978ab80a33efd07d5f5436b593650cb547709e42ab483',
    input:
      '0x6b60bba8000000000000000000000000af88d065e77c8cc2239327c5edb3a432268e58310000000000000000000000008616e8ea83f048ab9a5ec513c9412dd2993bce3f0000000000000000000000008616e8ea83f048ab9a5ec513c9412dd2993bce3f000000000000000000000000ff970a61a04b1ca14834a43f5de4533ebddb5cc800000000000000000000000000000000000000000000000000000000004c4b4000000000000000000000000029d7e0c5839715a2fe6670a248f471427104b26600000000000000000000000000000000000000000000000000000000004b06f5000000000000000000000000b17b674d9c5cb2e441f8e196a2f048a81355d031000000000000000000000000ab174ffa530c888649c44c4d21c849bbaabc723f000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000002a0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000001e0000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000000010000000000000000000000008616e8ea83f048ab9a5ec513c9412dd2993bce3f00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000005f5e1000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000006567b9010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000006567b8e300000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000276000000000000000000000000000000000000000000000000000000000000004133eb56c191a220daa863c652d0ccec844c7211e858682671eb448209d3eabf9d334f75f7faf09134d9802b9ebc30fec937e885a215597dd12e0cec50733cde461b00000000000000000000000000000000000000000000000000000000000000',
    value: '0',
  },
  params: {
    chainId: ARBITRUM_ONE,
    tokenIn: '0xaf88d065e77c8cc2239327c5edb3a432268e5831', // USDC
    tokenOut: '0xff970a61a04b1ca14834a43f5de4533ebddb5cc8', // USDC.e
    amountIn: GreaterThanOrEqual(parseUnits('5', 6)),
    amountOut: GreaterThanOrEqual(parseUnits('4.91', 6)),
    recipient: '0x29d7e0c5839715a2fe6670a248f471427104b266',
  },
}

const HLP_CURVE_V2_TOKEN_TO_CURVE: TestParams<SwapActionParams> = {
  transaction: {
    chainId: 42161,
    from: '0x49908e05de9e1d559499b08042d1123a1daae6b4',
    to: '0x559844b1df66e247f83ba58bc39fa488a1af1093',
    hash: '0x819ec6afd60b26412e830feb80b5abe1dab1229fc6ef6a42224e59fb85385d51',
    input:
      '0xaa2a4e99000000000000000000000000398b09b68aec6c58e28ade6147dac2ecc67897370000000000000000000000008616e8ea83f048ab9a5ec513c9412dd2993bce3f000000000000000000000000ff970a61a04b1ca14834a43f5de4533ebddb5cc8000000000000000000000000000000000000000000000000b7e85e4a813dad6900000000000000000000000049908e05de9e1d559499b08042d1123a1daae6b4000000000000000000000000000000000000000000000000000000000091beb1000000000000000000000000b17b674d9c5cb2e441f8e196a2f048a81355d031000000000000000000000000ab174ffa530c888649c44c4d21c849bbaabc723f00000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000380000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001a00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000026000000000000000000000000000000000000000000000000000000000000002c00000000000000000000000000000000000000000000000000000000000000002000000000000000000000000398b09b68aec6c58e28ade6147dac2ecc67897370000000000000000000000008616e8ea83f048ab9a5ec513c9412dd2993bce3f0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000462c3270000000000000000000000000000000000000000000000000000000005f5e1000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000006576db75000000000000000000000000000000000000000000000000000000006576db750000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000006576db57000000000000000000000000000000000000000000000000000000006576db57000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000002760000000000000000000000000000000000000000000000000000000000000276000000000000000000000000000000000000000000000000000000000000008262a5a161621679746f538a2b7e13363697e5e2726eb9a46b7947e92a4b92d532779302cae8526271f6ea42384bc4aa34982060913b3fd20d9fd3d88dbadb84c91b898ee47331d840ba6d8db65df6ff0491c78b4e75b6a5a10fcdfff3a1249786fd2ad393afaf66cd151dd5e452592e72bab63a6bfd1ab4c0f2a0eb29da94db6b321c000000000000000000000000000000000000000000000000000000000000',
    value: '0',
  },
  params: {
    chainId: ARBITRUM_ONE,
    tokenIn: '0x398b09b68aec6c58e28ade6147dac2ecc6789737', // fxCAD
    tokenOut: '0xff970a61a04b1ca14834a43f5de4533ebddb5cc8', // USDC.e
    amountIn: GreaterThanOrEqual(parseUnits('13.25', 18)),
    amountOut: GreaterThanOrEqual(parseUnits('9.5', 6)),
    recipient: '0x49908e05de9e1d559499b08042d1123a1daae6b4',
  },
}

const HLP_BALANCER_TOKENS_ETH: TestParams<SwapActionParams> = {
  transaction: {
    chainId: 42161,
    from: '0xba216e52be5a93e8ba380a761811f3802fa6ed89',
    to: '0x9bdc4094860c97d9e5f1c18c4602a4a907d0a916',
    hash: '0xe497a8357fb2e62f26da4d01c8ca9570c2613cd55ff3cb89b37685d10aaa8f8e',
    input:
      '0x8775b592000000000000000000000000db298285fe4c5410b05390ca80e8fbe9de1f259b0000000000000000000000008616e8ea83f048ab9a5ec513c9412dd2993bce3f4f14d06cb1661ce1dc2a2f26a10a7cd94393b29c00020000000000000000009700000000000000000000000000000000000000000000003863504448e6bdb6d7000000000000000000000000000000000000000000000000001385b35810f088000000000000000000000000ba216e52be5a93e8ba380a761811f3802fa6ed8900000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000380000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001a00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000026000000000000000000000000000000000000000000000000000000000000002c0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000082af49447d8a07e3bd95bd0d56f35241523fbab10000000000000000000000008616e8ea83f048ab9a5ec513c9412dd2993bce3f0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000368e1254c00000000000000000000000000000000000000000000000000000000005f5e10000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000065757b760000000000000000000000000000000000000000000000000000000065757b7600000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000065757b580000000000000000000000000000000000000000000000000000000065757b58000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000002760000000000000000000000000000000000000000000000000000000000000276000000000000000000000000000000000000000000000000000000000000008262d1ee51a53236d3ebdbca285ca729bf4671de987335013f17a866f8d42e940a1f02af4df4669edfe6f85dec65c53e5a083be04f36223aa810fc9cfe59c519721ca6c0001d3c24b12f17da5277b9f6abe142906e059701e8272e8c04379beafa5553635cc7f588fcdc5cc72e4b4a65d044d4de6203e9a1fae08522a6e3000f83ed1c000000000000000000000000000000000000000000000000000000000000',
    value: '0',
  },
  params: {
    chainId: ARBITRUM_ONE,
    tokenIn: '0xdb298285fe4c5410b05390ca80e8fbe9de1f259b', // FOREX
    tokenOut: zeroAddress, // ETH
    amountIn: GreaterThanOrEqual(parseUnits('1040', 18)),
    amountOut: GreaterThanOrEqual(parseEther('0.0054')),
    recipient: '0xba216e52be5a93e8ba380a761811f3802fa6ed89',
  },
}

const HLP_BALANCER_ETH_TOKENS: TestParams<SwapActionParams> = {
  transaction: {
    chainId: 42161,
    from: '0xac91c1a921f352d9fdee51320d7b91001c2b21c7',
    to: '0x9bdc4094860c97d9e5f1c18c4602a4a907d0a916',
    hash: '0x58afb2cc0908f7049700bc10bbd144dc12df7baa2ac616abd0f4eefb22012b73',
    input:
      '0x892eb1b10000000000000000000000008616e8ea83f048ab9a5ec513c9412dd2993bce3f000000000000000000000000db298285fe4c5410b05390ca80e8fbe9de1f259b4f14d06cb1661ce1dc2a2f26a10a7cd94393b29c00020000000000000000009700000000000000000000000000000000000000000000190bf2e1dcbcaa1ed7b6000000000000000000000000ac91c1a921f352d9fdee51320d7b91001c2b21c700000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000380000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001a00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000026000000000000000000000000000000000000000000000000000000000000002c0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000082af49447d8a07e3bd95bd0d56f35241523fbab10000000000000000000000008616e8ea83f048ab9a5ec513c9412dd2993bce3f000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000032722e46000000000000000000000000000000000000000000000000000000000005f5e100000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000657fdbf300000000000000000000000000000000000000000000000000000000657fdbf3000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000657fdbd500000000000000000000000000000000000000000000000000000000657fdbd50000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000027600000000000000000000000000000000000000000000000000000000000002760000000000000000000000000000000000000000000000000000000000000082aa27720eac78bf96077ea6dee2eb5f8d94f28b0a8d38c5210716231345a061dc3a2e661879dd39c22d6c507c466679097cefc991e3c62d576dfdd913f09986161bf2b7ff86af8641a694e6e0a57720a09ffa3969271180aa2a24913f5ba7e7e4c16eea7a19ac2f6d69377f0a8b961f606d9f135f2396e226621d9c1fe11c5264a51b000000000000000000000000000000000000000000000000000000000000',
    value: '595000000000000000',
  },
  params: {
    chainId: ARBITRUM_ONE,
    tokenIn: zeroAddress, // ETH
    tokenOut: '0xdb298285fe4c5410b05390ca80e8fbe9de1f259b', // FOREX
    amountIn: GreaterThanOrEqual(parseEther('0.595')),
    amountOut: GreaterThanOrEqual(parseUnits('118270', 18)),
    recipient: '0xac91c1a921f352d9fdee51320d7b91001c2b21c7',
  },
}

const CURVE_FACTORY_V2: TestParams<SwapActionParams> = {
  transaction: {
    chainId: 42161,
    from: '0x86d55a7c9e70ba692b9b9b8460f354034f9ec896',
    to: '0xab174ffa530c888649c44c4d21c849bbaabc723f',
    hash: '0x77bd0b3159930e1b11aa5fcbcad5bb90f0e8693ea3873219ec6eb8f6d9ee524d',
    input:
      '0xa6417ed6000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000008f64fe4909d7f9a300000000000000000000000000000000000000000000000000000000009a80bd',
    value: '0',
  },
  params: {
    chainId: ARBITRUM_ONE,
    tokenIn: '0x8616e8ea83f048ab9a5ec513c9412dd2993bce3f', // fxUSD
    tokenOut: '0xff970a61a04b1ca14834a43f5de4533ebddb5cc8', // USDC.e
    amountIn: GreaterThanOrEqual(parseUnits('10', 18)),
    amountOut: GreaterThanOrEqual(parseUnits('10', 6)),
    recipient: '0x86d55a7c9e70ba692b9b9b8460f354034f9ec896',
  },
}

const CURVE_FACTORY_2POOL: TestParams<SwapActionParams> = {
  transaction: {
    chainId: 42161,
    from: '0x0b8b2a4996627f9bf106e7b6d9540f1266841957',
    to: '0xd0dd5d76cf0fc06dabc48632735566dca241a35e',
    hash: '0xa7f8d500da701b028d037740a5f74a73eaaff7d344526484812e96ef354cae26',
    input:
      '0xa6417ed6000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000008c1c0e211a8d8000000000000000000000000000000000000000000000000000000000000096c973',
    value: '0',
  },
  params: {
    chainId: ARBITRUM_ONE,
    tokenIn: '0x8616e8ea83f048ab9a5ec513c9412dd2993bce3f', // fxUSD
    tokenOut: '0xfd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb9', // USDT
    amountIn: GreaterThanOrEqual(parseUnits('10', 18)),
    amountOut: GreaterThanOrEqual(parseUnits('9.65', 6)),
    recipient: '0x0b8b2a4996627f9bf106e7b6d9540f1266841957',
  },
}

export const passingTestCases = [
  createTestCase(
    PARASWAP_SIMPLESWAP,
    'when routed through paraswap (simpleswap)',
  ),
  createTestCase(
    PARASWAP_MULTISWAP,
    'when routed through paraswap (multiswap)',
  ),
  createTestCase(PARASWAP_UNI_V3, 'when routed through paraswap (uniV3Swap)'),
  createTestCase(
    V2_ROUTER_ETH_TOKENS,
    'when routed through V2 router (ETH To Tokens)',
  ),
  createTestCase(
    V2_ROUTER_TOKENS_ETH,
    'when routed through V2 router (Tokens To ETH)',
  ),
  createTestCase(
    HSPMHLP_TOKENS_ETH,
    'when routed through HSPMHLP (Tokens To ETH)',
  ),
  createTestCase(
    HSPMHLP_TOKENS_TOKENS,
    'when routed through HSPMHLP (Tokens To Tokens)',
  ),
  createTestCase(
    HPSM2_WITHDRAW,
    'when routed through HSPM2 contract (withdraw)',
  ),
  createTestCase(HPSM2_DEPOSIT, 'when routed through HSPM2 contract (deposit)'),
  createTestCase(
    HLP_CURVE_V2_ETH_TO_CURVE,
    'when routed through HLPcurveV2 contract (ETH to tokens)',
  ),
  createTestCase(
    HLP_CURVE_V2_PEGGED_TO_CURVE,
    'when routed through HLPcurveV2 contract (Pegged to Curve)',
  ),
  createTestCase(
    HLP_CURVE_V2_TOKEN_TO_CURVE,
    'when routed through HLPcurveV2 contract (Token to Curve)',
  ),
  createTestCase(
    HLP_BALANCER_ETH_TOKENS,
    'when routed through HLPBalancer contract (ETH to tokens)',
  ),
  createTestCase(
    HLP_BALANCER_TOKENS_ETH,
    'when routed through HLPBalancer contract (Tokens to ETH)',
  ),
  createTestCase(
    CURVE_FACTORY_V2,
    'when routed through curve factory v2 contract',
  ),
  createTestCase(CURVE_FACTORY_2POOL, 'when routed through curve 2pool'),
  createTestCase(
    PARASWAP_SIMPLESWAP,
    'when routed through paraswap (simpleswap) using any token',
    {
      tokenIn: undefined,
      tokenOut: undefined,
      amountIn: undefined,
      amountOut: undefined,
    },
  ),
  createTestCase(
    PARASWAP_MULTISWAP,
    'when routed through paraswap (multiswap) using any token',
    {
      tokenIn: undefined,
      tokenOut: undefined,
      amountIn: undefined,
      amountOut: undefined,
    },
  ),
  createTestCase(
    PARASWAP_UNI_V3,
    'when routed through paraswap (uniV3Swap) using any token',
    {
      tokenIn: undefined,
      tokenOut: undefined,
      amountIn: undefined,
      amountOut: undefined,
    },
  ),
  createTestCase(
    V2_ROUTER_ETH_TOKENS,
    'when routed through V2 router (ETH To Tokens) using any token',
    {
      tokenIn: undefined,
      tokenOut: undefined,
      amountIn: undefined,
      amountOut: undefined,
    },
  ),
  createTestCase(
    V2_ROUTER_TOKENS_ETH,
    'when routed through V2 router (Tokens To ETH) using any token',
    {
      tokenIn: undefined,
      tokenOut: undefined,
      amountIn: undefined,
      amountOut: undefined,
    },
  ),
  createTestCase(
    HPSM2_WITHDRAW,
    'when routed through HSPM2 contract (withdraw) using any token',
    {
      tokenIn: undefined,
      tokenOut: undefined,
      amountIn: undefined,
      amountOut: undefined,
    },
  ),
  createTestCase(
    HSPMHLP_TOKENS_ETH,
    'when routed through HSPMHLP (Tokens To ETH) using any token',
    {
      tokenIn: undefined,
      tokenOut: undefined,
      amountIn: undefined,
      amountOut: undefined,
    },
  ),
  createTestCase(
    HSPMHLP_TOKENS_TOKENS,
    'when routed through HSPMHLP (Tokens To Tokens) using any token',
    {
      tokenIn: undefined,
      tokenOut: undefined,
      amountIn: undefined,
      amountOut: undefined,
    },
  ),
  createTestCase(
    HPSM2_DEPOSIT,
    'when routed through HSPM2 contract (deposit) using any token',
    {
      tokenIn: undefined,
      tokenOut: undefined,
      amountIn: undefined,
      amountOut: undefined,
    },
  ),
  createTestCase(
    HLP_CURVE_V2_ETH_TO_CURVE,
    'when routed through HLPcurveV2 contract (ETH to tokens) using any token',
    {
      tokenIn: undefined,
      tokenOut: undefined,
      amountIn: undefined,
      amountOut: undefined,
    },
  ),
  createTestCase(
    HLP_CURVE_V2_PEGGED_TO_CURVE,
    'when routed through HLPcurveV2 contract (Pegged to Curve) using any token',
    {
      tokenIn: undefined,
      tokenOut: undefined,
      amountIn: undefined,
      amountOut: undefined,
    },
  ),
  createTestCase(
    HLP_CURVE_V2_TOKEN_TO_CURVE,
    'when routed through HLPcurveV2 contract (Token to Curve) using any token',
    {
      tokenIn: undefined,
      tokenOut: undefined,
      amountIn: undefined,
      amountOut: undefined,
    },
  ),
  createTestCase(
    HLP_BALANCER_ETH_TOKENS,
    'when routed through HLPBalancer contract (ETH to tokens) using any token',
    {
      tokenIn: undefined,
      tokenOut: undefined,
      amountIn: undefined,
      amountOut: undefined,
    },
  ),
  createTestCase(
    HLP_BALANCER_TOKENS_ETH,
    'when routed through HLPBalancer contract (Tokens to ETH) using any token',
    {
      tokenIn: undefined,
      tokenOut: undefined,
      amountIn: undefined,
      amountOut: undefined,
    },
  ),
  createTestCase(
    CURVE_FACTORY_V2,
    'when routed through curve factory v2 contract using any token',
    {
      tokenIn: undefined,
      tokenOut: undefined,
      amountIn: undefined,
      amountOut: undefined,
    },
  ),
  createTestCase(
    CURVE_FACTORY_2POOL,
    'when routed through curve 2pool using any token',
    {
      tokenIn: undefined,
      tokenOut: undefined,
      amountIn: undefined,
      amountOut: undefined,
    },
  ),
  createTestCase(
    PARASWAP_SIMPLESWAP,
    'when routed through paraswap (simpleswap) using checksummed token addresses',
    {
      tokenIn: getAddress(PARASWAP_SIMPLESWAP.params.tokenIn as Address),
      tokenOut: getAddress(PARASWAP_SIMPLESWAP.params.tokenOut as Address),
    },
  ),
  createTestCase(
    PARASWAP_MULTISWAP,
    'when routed through paraswap (multiswap) using checksummed token addresses',
    {
      tokenIn: getAddress(PARASWAP_MULTISWAP.params.tokenIn as Address),
      tokenOut: getAddress(PARASWAP_MULTISWAP.params.tokenOut as Address),
    },
  ),
  createTestCase(
    PARASWAP_UNI_V3,
    'when routed through paraswap (uniV3Swap) using checksummed token addresses',
    {
      tokenIn: getAddress(PARASWAP_UNI_V3.params.tokenIn as Address),
      tokenOut: getAddress(PARASWAP_UNI_V3.params.tokenOut as Address),
    },
  ),
  createTestCase(
    V2_ROUTER_ETH_TOKENS,
    'when routed through V2 router (ETH To Tokens) using checksummed token addresses',
    {
      tokenIn: getAddress(V2_ROUTER_ETH_TOKENS.params.tokenIn as Address),
      tokenOut: getAddress(V2_ROUTER_ETH_TOKENS.params.tokenOut as Address),
    },
  ),
  createTestCase(
    V2_ROUTER_TOKENS_ETH,
    'when routed through V2 router (Tokens To ETH) using checksummed token addresses',
    {
      tokenIn: getAddress(V2_ROUTER_TOKENS_ETH.params.tokenIn as Address),
      tokenOut: getAddress(V2_ROUTER_TOKENS_ETH.params.tokenOut as Address),
    },
  ),
  createTestCase(
    HPSM2_WITHDRAW,
    'when routed through HSPM2 contract (withdraw) using checksummed token addresses',
    {
      tokenIn: getAddress(HPSM2_WITHDRAW.params.tokenIn as Address),
      tokenOut: getAddress(HPSM2_WITHDRAW.params.tokenOut as Address),
    },
  ),
  createTestCase(
    HPSM2_DEPOSIT,
    'when routed through HSPM2 contract (deposit) using checksummed token addresses',
    {
      tokenIn: getAddress(HPSM2_DEPOSIT.params.tokenIn as Address),
      tokenOut: getAddress(HPSM2_DEPOSIT.params.tokenOut as Address),
    },
  ),
  createTestCase(
    HLP_CURVE_V2_ETH_TO_CURVE,
    'when routed through HLPcurveV2 contract (ETH to tokens) using checksummed token addresses',
    {
      tokenIn: getAddress(HLP_CURVE_V2_ETH_TO_CURVE.params.tokenIn as Address),
      tokenOut: getAddress(
        HLP_CURVE_V2_ETH_TO_CURVE.params.tokenOut as Address,
      ),
    },
  ),
  createTestCase(
    HLP_CURVE_V2_PEGGED_TO_CURVE,
    'when routed through HLPcurveV2 contract (Pegged to Curve) using checksummed token addresses',
    {
      tokenIn: getAddress(
        HLP_CURVE_V2_PEGGED_TO_CURVE.params.tokenIn as Address,
      ),
      tokenOut: getAddress(
        HLP_CURVE_V2_PEGGED_TO_CURVE.params.tokenOut as Address,
      ),
    },
  ),
  createTestCase(
    HLP_CURVE_V2_TOKEN_TO_CURVE,
    'when routed through HLPcurveV2 contract (Token to Curve) using checksummed token addresses',
    {
      tokenIn: getAddress(
        HLP_CURVE_V2_TOKEN_TO_CURVE.params.tokenIn as Address,
      ),
      tokenOut: getAddress(
        HLP_CURVE_V2_TOKEN_TO_CURVE.params.tokenOut as Address,
      ),
    },
  ),
  createTestCase(
    HLP_BALANCER_ETH_TOKENS,
    'when routed through HLPBalancer contract (ETH to tokens) using checksummed token addresses',
    {
      tokenIn: getAddress(HLP_BALANCER_ETH_TOKENS.params.tokenIn as Address),
      tokenOut: getAddress(HLP_BALANCER_ETH_TOKENS.params.tokenOut as Address),
    },
  ),
  createTestCase(
    HLP_BALANCER_TOKENS_ETH,
    'when routed through HLPBalancer contract (Tokens to ETH) using checksummed token addresses',
    {
      tokenIn: getAddress(HLP_BALANCER_TOKENS_ETH.params.tokenIn as Address),
      tokenOut: getAddress(HLP_BALANCER_TOKENS_ETH.params.tokenOut as Address),
    },
  ),
  createTestCase(
    CURVE_FACTORY_V2,
    'when routed through curve factory v2 contract using checksummed token addresses',
    {
      tokenIn: getAddress(CURVE_FACTORY_V2.params.tokenIn as Address),
      tokenOut: getAddress(CURVE_FACTORY_V2.params.tokenOut as Address),
    },
  ),
  createTestCase(
    CURVE_FACTORY_2POOL,
    'when routed through curve 2pool using checksummed token addresses',
    {
      tokenIn: getAddress(CURVE_FACTORY_2POOL.params.tokenIn as Address),
      tokenOut: getAddress(CURVE_FACTORY_2POOL.params.tokenOut as Address),
    },
  ),
]

export const failingTestCases = [
  createTestCase(
    PARASWAP_FAIL,
    'when using paraswap route not referred by handlefi',
  ),
  createTestCase(V2_ROUTER_TOKENS_ETH, 'when chainId is incorrect', {
    chainId: 324,
  }),
  createTestCase(
    PARASWAP_SIMPLESWAP,
    'when routed through paraswap (simpleswap) and tokenIn is not correct',
    {
      tokenIn: '0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE',
    },
  ),
  createTestCase(
    PARASWAP_MULTISWAP,
    'when routed through paraswap (multiswap)',
    {
      tokenIn: '0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE',
    },
  ),
  createTestCase(
    PARASWAP_UNI_V3,
    'when routed through paraswap (uniV3Swap) and tokenIn is not correct',
    {
      tokenIn: '0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE',
    },
  ),
  createTestCase(
    V2_ROUTER_ETH_TOKENS,
    'when routed through V2 router (ETH To Tokens) and tokenIn is not correct',
    {
      tokenIn: '0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE',
    },
  ),
  createTestCase(
    V2_ROUTER_TOKENS_ETH,
    'when routed through V2 router (Tokens To ETH) and tokenIn is not correct',
    {
      tokenIn: '0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE',
    },
  ),
  createTestCase(
    HSPMHLP_TOKENS_ETH,
    'when routed through HSPMHLP (Tokens To ETH) and tokenIn is not correct',
    {
      tokenIn: '0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE',
    },
  ),
  createTestCase(
    HSPMHLP_TOKENS_TOKENS,
    'when routed through HSPMHLP (Tokens To Tokens) and tokenIn is not correct',
    {
      tokenIn: '0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE',
    },
  ),
  createTestCase(
    HPSM2_WITHDRAW,
    'when routed through HSPM2 contract (withdraw) and tokenIn is not correct',
    {
      tokenIn: '0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE',
    },
  ),
  createTestCase(
    HPSM2_DEPOSIT,
    'when routed through HSPM2 contract (deposit) and tokenIn is not correct',
    {
      tokenIn: '0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE',
    },
  ),
  createTestCase(
    HLP_CURVE_V2_ETH_TO_CURVE,
    'when routed through HLPcurveV2 contract (ETH to tokens) and tokenIn is not correct',
    {
      tokenIn: '0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE',
    },
  ),
  createTestCase(
    HLP_CURVE_V2_PEGGED_TO_CURVE,
    'when routed through HLPcurveV2 contract (Pegged to Curve) and tokenIn is not correct',
    {
      tokenIn: '0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE',
    },
  ),
  createTestCase(
    HLP_CURVE_V2_TOKEN_TO_CURVE,
    'when routed through HLPcurveV2 contract (Token to Curve) and tokenIn is not correct',
    {
      tokenIn: '0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE',
    },
  ),
  createTestCase(
    HLP_BALANCER_ETH_TOKENS,
    'when routed through HLPBalancer contract (ETH to tokens) and tokenIn is not correct',
    {
      tokenIn: '0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE',
    },
  ),
  createTestCase(
    HLP_BALANCER_TOKENS_ETH,
    'when routed through HLPBalancer contract (Tokens to ETH) and tokenIn is not correct',
    {
      tokenIn: '0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE',
    },
  ),
  createTestCase(
    CURVE_FACTORY_V2,
    'when routed through curve factory v2 contract and tokenIn is not correct',
    {
      tokenIn: '0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE',
    },
  ),
  createTestCase(
    CURVE_FACTORY_2POOL,
    'when routed through curve 2pool and tokenIn is not correct',
    {
      tokenIn: '0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE',
    },
  ),
  createTestCase(
    PARASWAP_SIMPLESWAP,
    'when routed through paraswap (simpleswap) and tokenOut is not correct',
    {
      tokenOut: '0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE',
    },
  ),
  createTestCase(
    PARASWAP_MULTISWAP,
    'when routed through paraswap (multiswap) and tokenOut is not correct',
    {
      tokenOut: '0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE',
    },
  ),
  createTestCase(
    PARASWAP_UNI_V3,
    'when routed through paraswap (uniV3Swap) and tokenOut is not correct',
    {
      tokenOut: '0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE',
    },
  ),
  createTestCase(
    V2_ROUTER_ETH_TOKENS,
    'when routed through V2 router (ETH To Tokens) and tokenOut is not correct',
    {
      tokenOut: '0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE',
    },
  ),
  createTestCase(
    V2_ROUTER_TOKENS_ETH,
    'when routed through V2 router (Tokens To ETH) and tokenOut is not correct',
    {
      tokenOut: '0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE',
    },
  ),
  createTestCase(
    HPSM2_WITHDRAW,
    'when routed through HSPM2 contract (withdraw) and tokenOut is not correct',
    {
      tokenOut: '0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE',
    },
  ),
  createTestCase(
    HPSM2_DEPOSIT,
    'when routed through HSPM2 contract (deposit) and tokenOut is not correct',
    {
      tokenOut: '0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE',
    },
  ),
  createTestCase(
    HLP_CURVE_V2_ETH_TO_CURVE,
    'when routed through HLPcurveV2 contract (ETH to tokens) and tokenOut is not correct',
    {
      tokenOut: '0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE',
    },
  ),
  createTestCase(
    HLP_CURVE_V2_PEGGED_TO_CURVE,
    'when routed through HLPcurveV2 contract (Pegged to Curve) and tokenOut is not correct',
    {
      tokenOut: '0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE',
    },
  ),
  createTestCase(
    HLP_CURVE_V2_TOKEN_TO_CURVE,
    'when routed through HLPcurveV2 contract (Token to Curve) and tokenOut is not correct',
    {
      tokenOut: '0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE',
    },
  ),
  createTestCase(
    HLP_BALANCER_ETH_TOKENS,
    'when routed through HLPBalancer contract (ETH to tokens) and tokenOut is not correct',
    {
      tokenOut: '0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE',
    },
  ),
  createTestCase(
    CURVE_FACTORY_V2,
    'when routed through curve factory v2 contract and tokenOut is not correct',
    {
      tokenOut: '0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE',
    },
  ),
  createTestCase(
    CURVE_FACTORY_2POOL,
    'when routed through curve 2pool and tokenOut is not correct',
    {
      tokenOut: '0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE',
    },
  ),
  createTestCase(
    PARASWAP_SIMPLESWAP,
    'when routed through paraswap (simpleswap) and amountOut is not sufficient',
    {
      amountOut: GreaterThanOrEqual(parseEther('1000000')),
    },
  ),
  createTestCase(
    PARASWAP_MULTISWAP,
    'when routed through paraswap (multiswap) and amountOut is not sufficient',
    {
      amountOut: GreaterThanOrEqual(parseEther('1000000')),
    },
  ),
  createTestCase(
    PARASWAP_UNI_V3,
    'when routed through paraswap (uniV3Swap) and amountOut is not sufficient',
    {
      amountOut: GreaterThanOrEqual(parseEther('1000000')),
    },
  ),
  createTestCase(
    V2_ROUTER_ETH_TOKENS,
    'when routed through V2 router (ETH To Tokens) and amountOut is not sufficient',
    {
      amountOut: GreaterThanOrEqual(parseEther('1000000')),
    },
  ),
  createTestCase(
    V2_ROUTER_TOKENS_ETH,
    'when routed through V2 router (Tokens To ETH) and amountOut is not sufficient',
    {
      amountOut: GreaterThanOrEqual(parseEther('1000000')),
    },
  ),
  createTestCase(
    HSPMHLP_TOKENS_ETH,
    'when routed through HSPMHLP (Tokens To ETH) and amountOut is not sufficient',
    {
      amountOut: GreaterThanOrEqual(parseEther('1000000')),
    },
  ),
  createTestCase(
    HSPMHLP_TOKENS_TOKENS,
    'when routed through HSPMHLP (Tokens To Tokens) and amountOut is not sufficient',
    {
      amountOut: GreaterThanOrEqual(parseEther('1000000')),
    },
  ),
  createTestCase(
    HLP_CURVE_V2_ETH_TO_CURVE,
    'when routed through HLPcurveV2 contract (ETH to tokens) and amountOut is not sufficient',
    {
      amountOut: GreaterThanOrEqual(parseEther('1000000')),
    },
  ),
  createTestCase(
    HLP_CURVE_V2_PEGGED_TO_CURVE,
    'when routed through HLPcurveV2 contract (Pegged to Curve) and amountOut is not sufficient',
    {
      amountOut: GreaterThanOrEqual(parseEther('1000000')),
    },
  ),
  createTestCase(
    HLP_CURVE_V2_TOKEN_TO_CURVE,
    'when routed through HLPcurveV2 contract (Token to Curve) and amountOut is not sufficient',
    {
      amountOut: GreaterThanOrEqual(parseEther('1000000')),
    },
  ),
  createTestCase(
    HLP_BALANCER_ETH_TOKENS,
    'when routed through HLPBalancer contract (ETH to tokens) and amountOut is not sufficient',
    {
      amountOut: GreaterThanOrEqual(parseEther('1000000')),
    },
  ),
  createTestCase(
    CURVE_FACTORY_V2,
    'when routed through curve factory v2 contract and amountOut is not sufficient',
    {
      amountOut: GreaterThanOrEqual(parseEther('1000000')),
    },
  ),
  createTestCase(
    CURVE_FACTORY_2POOL,
    'when routed through curve 2pool and amountOut is not sufficient',
    {
      amountOut: GreaterThanOrEqual(parseEther('1000000')),
    },
  ),
  createTestCase(
    PARASWAP_SIMPLESWAP,
    'when routed through paraswap (simpleswap) and amountIn is not sufficient',
    {
      amountIn: GreaterThanOrEqual(parseEther('1000000')),
    },
  ),
  createTestCase(
    PARASWAP_MULTISWAP,
    'when routed through paraswap (multiswap) and amountIn is not sufficient',
    {
      amountIn: GreaterThanOrEqual(parseEther('1000000')),
    },
  ),
  createTestCase(
    PARASWAP_UNI_V3,
    'when routed through paraswap (uniV3Swap) and amountIn is not sufficient',
    {
      amountIn: GreaterThanOrEqual(parseEther('1000000')),
    },
  ),
  createTestCase(
    V2_ROUTER_ETH_TOKENS,
    'when routed through V2 router (ETH To Tokens) and amountIn is not sufficient',
    {
      amountIn: GreaterThanOrEqual(parseEther('1000000')),
    },
  ),
  createTestCase(
    V2_ROUTER_TOKENS_ETH,
    'when routed through V2 router (Tokens To ETH) and amountIn is not sufficient',
    {
      amountIn: GreaterThanOrEqual(parseEther('1000000')),
    },
  ),
  createTestCase(
    HSPMHLP_TOKENS_ETH,
    'when routed through HSPMHLP (Tokens To ETH) and amountIn is not sufficient',
    {
      amountIn: GreaterThanOrEqual(parseEther('1000000')),
    },
  ),
  createTestCase(
    HSPMHLP_TOKENS_TOKENS,
    'when routed through HSPMHLP (Tokens To Tokens) and amountIn is not sufficient',
    {
      amountIn: GreaterThanOrEqual(parseEther('1000000')),
    },
  ),
  createTestCase(
    HPSM2_WITHDRAW,
    'when routed through HSPM2 contract (withdraw) and amountIn is not sufficient',
    {
      amountIn: GreaterThanOrEqual(parseEther('1000000')),
    },
  ),
  createTestCase(
    HPSM2_DEPOSIT,
    'when routed through HSPM2 contract (deposit) and amountIn is not sufficient',
    {
      amountIn: GreaterThanOrEqual(parseEther('1000000')),
    },
  ),
  createTestCase(
    HLP_CURVE_V2_ETH_TO_CURVE,
    'when routed through HLPcurveV2 contract (ETH to tokens) and amountIn is not sufficient',
    {
      amountIn: GreaterThanOrEqual(parseEther('1000000')),
    },
  ),
  createTestCase(
    HLP_CURVE_V2_PEGGED_TO_CURVE,
    'when routed through HLPcurveV2 contract (Pegged to Curve) and amountIn is not sufficient',
    {
      amountIn: GreaterThanOrEqual(parseEther('1000000')),
    },
  ),
  createTestCase(
    HLP_CURVE_V2_TOKEN_TO_CURVE,
    'when routed through HLPcurveV2 contract (Token to Curve) and amountIn is not sufficient',
    {
      amountIn: GreaterThanOrEqual(parseEther('1000000')),
    },
  ),
  createTestCase(
    HLP_BALANCER_ETH_TOKENS,
    'when routed through HLPBalancer contract (ETH to tokens) and amountIn is not sufficient',
    {
      amountIn: GreaterThanOrEqual(parseEther('1000000')),
    },
  ),
  createTestCase(
    CURVE_FACTORY_V2,
    'when routed through curve factory v2 contract and amountIn is not sufficient',
    {
      amountIn: GreaterThanOrEqual(parseEther('1000000')),
    },
  ),
  createTestCase(
    CURVE_FACTORY_2POOL,
    'when routed through curve 2pool and amountIn is not sufficient',
    {
      amountIn: GreaterThanOrEqual(parseEther('1000000')),
    },
  ),
]
